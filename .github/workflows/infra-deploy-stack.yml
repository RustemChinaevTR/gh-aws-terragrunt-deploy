name: Deploy infrastructure stack
on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        required: true
      github-environment:
        type: string
        required: true
      aws-region:
        type: string
        required: true
      aws-assume-role:
        type: string
        required: true
      terragrunt-env-var:
        type: string
        required: true
env:
  TERRAGRUNT_VERSION: 0.42.5
  CICD_AWS_REGION: us-east-1
jobs:
  plan:
    outputs:
      status: ${{ steps.plan.outputs.status }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Setup terragrunt
        uses: autero1/action-terragrunt@v1.2.0
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}

      - name: Setup sops
        uses: mdgreenwald/mozilla-sops-action@v1.4.0

      - name: Configure CICD AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.CICD_AWS_REGION }}

      - name: Decrypt files
        shell: pwsh
        working-directory: ${{ inputs.working-directory }}
        run: |
          Get-ChildItem -Filter *.enc.json -Recurse | %{ sops -d $_.FullName > ( $_.FullName -replace ".enc.json$", ".json" ) }

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Terragrunt plan
        id: plan
        env:
          ENV: ${{ steps.setup-env.outputs.value }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e
          terragrunt plan -detailed-exitcode -out=plan.out -input=false
          RETURN_CODE=$?
          set -e
          if [[ $RETURN_CODE -eq 0 ]]
          then
            echo "status=synced" >> $GITHUB_OUTPUT
          elif [[ $RETURN_CODE -eq 2 ]]
          then
            echo "status=outdated" >> $GITHUB_OUTPUT 
          else
            echo "status=error" >> $GITHUB_OUTPUT
            exit $RETURN_CODE
          fi

      - name: Terragrunt show plan
        env:
          ENV: ${{ inputs.terragrunt-env-var }}
        if: ${{ steps.plan.outputs.status == 'outdated' }}
        working-directory: ${{ inputs.working-directory }}
        shell: pwsh
        run: |
          $Plan = (terraform show -no-color plan.out | `
            %{ $_ -replace '^  ' -replace '~', '!'}  | `
            ?{ $_ -notlike '::debug::*' }) -join "`n"
          @"
          **Path:** *${{ inputs.working-directory }}*
          <details>
          <summary>Generated plan</summary>
          ``````diff
          $Plan
          </details>
          ``````
          "@ >> $env:GITHUB_STEP_SUMMARY

      - id: upload-file-name
        if: ${{ steps.plan.outputs.status == 'outdated' }}
        shell: pwsh
        run: echo "value=$('${{ inputs.working-directory }}' -replace '/', '-')" >> $Env:GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        if: ${{ steps.plan.outputs.status == 'outdated' }}
        with:
          name: ${{ steps.upload-file-name.outputs.value }}
          path: ${{ inputs.working-directory }}/plan.out

  apply:
    needs: plan
    environment: ${{ inputs.github-environment }}
    if: ${{ needs.plan.outputs.status == 'outdated' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Setup terragrunt
        uses: autero1/action-terragrunt@v1.2.0
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}

      - name: Setup sops
        uses: mdgreenwald/mozilla-sops-action@v1.4.0

      - name: Configure CICD AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.CICD_AWS_REGION }}

      - name: Decrypt files
        shell: pwsh
        working-directory: ${{ env.INFRA_ROOT }}
        run: |
          Get-ChildItem -Filter *.enc.json -Recurse | %{ sops -d $_.FullName > ( $_.FullName -replace ".enc.json$", ".json" ) }

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - id: download-file-name
        shell: pwsh
        run: echo "value=$('${{ inputs.working-directory }}' -replace '/', '-')" >> $Env:GITHUB_OUTPUT

      - uses: actions/download-artifact@v2
        with:
          name: ${{ steps.download-file-name.outputs.value }}
          path: ${{ inputs.working-directory }}

      - name: Terragrunt apply
        working-directory: ${{ inputs.working-directory }}
        run: terragrunt apply plan.out
