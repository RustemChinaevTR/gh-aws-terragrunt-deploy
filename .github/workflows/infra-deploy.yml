name: Infrastructure deploy
on:
  workflow_dispatch:
    inputs:
      aws-environment:
        required: true
        type: choice
        options: [ lab, dev, qa, ppe, prod ]
      aws-region:
        required: true
        type: choice
        options: [ us-east-1, eu-west-1 ]
env:
  ASSET_ID: a123456
  INFRA_PATH: ./infrastructure/manifest/app-name
  SHORT_REGION_MAP: '{ "us-east-1": "us", "eu-west-1": "ie" }'
  GITHUB_ENV_MAP: '{ "lab": "protected-lab", "qa": "protected-qa" }'
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      stacks: ${{ steps.setup.outputs.stacks }}
      stacksGroups: ${{ steps.setup.outputs.stacksGroups }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: setup
        working-directory: ${{ env.INFRA_PATH }}
        shell: pwsh
        run: |
          $Stacks = Get-ChildItem -Filter "gh-deployment.properties" -Recurse | ForEach-Object {
            $Region = $_.FullName -like '*/global/*' ? 'global' :  (ConvertFrom-Json '${{ env.SHORT_REGION_MAP }}').'${{ inputs.aws-region }}'
            $Env = "a123456-$Region-${{ inputs.aws-environment }}"
            [pscustomobject]@{
              Path = $_.Directory.FullName
              Env = $Env
              GithubEnvironment = (ConvertFrom-Json '${{ env.GITHUB_ENV_MAP }}').'${{ inputs.aws-environment }}'
              Properties = Get-Content $_.FullName -Raw | ConvertFrom-StringData
            }
          }
          
          $Groups = $Stacks | Select Path, @{Name = 'GroupId'; Expression = {$_.Properties['group-id']}} | `
              Group-Object -Property GroupId -AsHashTable -AsString
  
          echo "stacksGroups=$($Groups | ConvertTo-Json -Compress)" >> $Env:GITHUB_OUTPUT
          echo "stacks=$($Stacks | Group-Object Path -AsHashTable -AsString | ConvertTo-Json -Compress)" >> $Env:GITHUB_OUTPUT
          echo "terragruntEnvVar=$()" >> $Env:GITHUB_OUTPUT
  group-0:
    needs: setup
    uses: ./.github/workflows/infra-deploy-stack.yml
    strategy:
      matrix:
        path: ${{ fromJson(needs.setup.outputs.stacksGroups)['group-0'].*.Path }}
    with:
      working-directory: ${{ matrix.path }}
      github-environment: ${{ fromJson(needs.setup.outputs.stacks)[matrix.path][0].GithubEnvironment }}
      aws-region: ${{ inputs.aws-region }}
      aws-assume-role: TODO
      terragrunt-env-var: ${{ fromJson(needs.setup.outputs.stacks)[matrix.path][0].Env }}
    secrets: inherit

  group-1:
    needs: [setup, group-0 ]
    uses: ./.github/workflows/print.yml
    strategy:
      matrix:
        path: ${{ fromJson(needs.setup.outputs.stacksGroups)['group-1'].*.Path }}
    with:
      path: ${{ matrix.path }}
      env: ${{ fromJson(needs.setup.outputs.stacks)[matrix.path][0].Env }}

  group-2:
    needs: [setup, group-1 ]
    if: ${{ fromJson(needs.setup.outputs.stacksGroups)['group-2'] != '[]' && fromJson(needs.setup.outputs.stacksGroups)['group-2'] != '' }}
    uses: ./.github/workflows/print.yml
    strategy:
      matrix:
        path: ${{ fromJson(needs.setup.outputs.stacksGroups)['group-2'].*.Path }}
    with:
      path: ${{ matrix.path }}
      env: ${{ fromJson(needs.setup.outputs.stacks)[matrix.path][0].Env }}

